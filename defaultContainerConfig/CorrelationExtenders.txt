<javax.print.attribute.standard.PrinterStateReasons: void <init>(java.util.Map)>
<java.util.Collections$SynchronizedMap: void <init>(java.util.Map)>
<java.util.LinkedHashMap: void <init>(java.util.Map)>
<java.util.TreeMap: void <init>(java.util.Map)>
<java.util.TreeMap: void <init>(java.util.SortedMap)>
<java.util.IdentityHashMap: void <init>(java.util.Map)>
<java.util.HashMap: void <init>(java.util.Map)>
<java.util.Collections$UnmodifiableMap: void <init>(java.util.Map)>
<java.util.Collections$UnmodifiableSortedMap: void <init>(java.util.SortedMap)>
<java.util.EnumMap: void <init>(java.util.Map)>
<java.util.EnumMap: void <init>(java.util.EnumMap)>
<java.util.WeakHashMap: void <init>(java.util.Map)>
<java.awt.RenderingHints: void <init>(java.util.Map)>
<java.util.Hashtable: void <init>(java.util.Map)>
<java.util.Properties: void <init>(java.util.Properties)>
<java.lang.ProcessEnvironment$StringEnvironment: void <init>(java.util.Map)>
<java.util.concurrent.ConcurrentHashMap: void <init>(java.util.Map)>
<java.security.Provider: void putAll(java.util.Map)>
<java.util.AbstractMap: void putAll(java.util.Map)>
<java.util.jar.Attributes: void putAll(java.util.Map)>
<java.util.Collections$SynchronizedMap: void putAll(java.util.Map)>
<java.util.TreeMap: void putAll(java.util.Map)>
<java.util.IdentityHashMap: void putAll(java.util.Map)>
<java.util.HashMap: void putAll(java.util.Map)>
<java.util.Collections$UnmodifiableMap: void putAll(java.util.Map)>
<java.util.Collections$CheckedMap: void putAll(java.util.Map)>
<java.util.Collections$CheckedMap: void <init>(java.util.Map,java.lang.Class,java.lang.Class)>
<java.util.Collections$CheckedSortedMap: void <init>(java.util.SortedMap,java.lang.Class,java.lang.Class)>
<java.util.EnumMap: void putAll(java.util.Map)>
<java.util.WeakHashMap: void putAll(java.util.Map)>
<java.awt.RenderingHints: void putAll(java.util.Map)>
<java.util.Hashtable: void putAll(java.util.Map)>
<java.util.concurrent.ConcurrentHashMap: void putAll(java.util.Map)>
<java.util.PriorityQueue: void <init>(java.util.Collection)>
<java.util.PriorityQueue: void <init>(java.util.PriorityQueue)>
<java.util.PriorityQueue: void <init>(java.util.SortedSet)>
<java.util.concurrent.ConcurrentLinkedQueue: void <init>(java.util.Collection)>
<java.util.concurrent.ConcurrentLinkedQueue: boolean addAll(java.util.Collection)>
<sun.awt.util.IdentityArrayList: void <init>(java.util.Collection)>
<sun.awt.util.IdentityArrayList: boolean addAll(java.util.Collection)>
<java.util.SubList: void <init>(java.util.AbstractList,int,int)>
<java.util.SubList: boolean addAll(java.util.Collection)>
<java.util.SubList: int access$000(java.util.SubList)>
<java.util.SubList: java.util.AbstractList access$100(java.util.SubList)>
<java.util.SubList: int access$200(java.util.SubList)>
<java.util.SubList: int access$302(java.util.SubList,int)>
<java.util.SubList: int access$210(java.util.SubList)>
<java.util.SubList: int access$208(java.util.SubList)>
<java.util.Vector: void <init>(java.util.Collection)>
<java.util.Vector: boolean addAll(java.util.Collection)>
<java.util.Collections$UnmodifiableCollection: void <init>(java.util.Collection)>
<java.util.Collections$UnmodifiableCollection: boolean addAll(java.util.Collection)>
<java.util.Collections$CheckedCollection: void <init>(java.util.Collection,java.lang.Class)>
<java.util.Collections$CheckedCollection: boolean addAll(java.util.Collection)>
<java.util.Collections$UnmodifiableSet: void <init>(java.util.Set)>
<java.util.Collections$SynchronizedSortedSet: void <init>(java.util.SortedSet)>
<java.util.Collections$SynchronizedSortedSet: void <init>(java.util.SortedSet,java.lang.Object)>
<java.util.Collections$UnmodifiableCollection: void <init>(java.util.Collection)>
<java.util.Collections$AsLIFOQueue: void <init>(java.util.Deque)>
<java.util.Collections$CheckedSet: void <init>(java.util.Set,java.lang.Class)>
<java.util.Collections$CheckedCollection: void <init>(java.util.Collection,java.lang.Class)>
<java.util.Collections$SynchronizedCollection: void <init>(java.util.Collection,java.lang.Object)>
<java.util.Collections$CheckedList: void <init>(java.util.List,java.lang.Class)>
<java.util.Collections$SynchronizedSet: void <init>(java.util.Set)>
<java.util.Collections$SynchronizedSet: void <init>(java.util.Set,java.lang.Object)>
<java.util.Collections$SynchronizedList: void <init>(java.util.List)>
<java.util.Collections$SynchronizedList: void <init>(java.util.List,java.lang.Object)>
<java.util.Collections$UnmodifiableRandomAccessList: void <init>(java.util.List)>
<java.util.Collections$SynchronizedRandomAccessList: void <init>(java.util.List)>
<java.util.Collections$SynchronizedRandomAccessList: void <init>(java.util.List,java.lang.Object)>
<java.util.Collections$EmptyList: void <init>(java.util.Collections$1)>
<java.util.Collections$UnmodifiableSortedSet: void <init>(java.util.SortedSet)>
<java.util.Collections$CheckedSortedSet: void <init>(java.util.SortedSet,java.lang.Class)>
<java.util.Collections$UnmodifiableList: void <init>(java.util.List)>
<java.util.Collections$UnmodifiableSet: void <init>(java.util.Set)>
<java.util.Collections$CheckedRandomAccessList: void <init>(java.util.List,java.lang.Class)>
<java.util.Collections$UnmodifiableCollection: boolean addAll(java.util.Collection)>
<java.util.Collections$CheckedCollection: boolean addAll(java.util.Collection)>
<java.util.Collections$SynchronizedCollection: boolean addAll(java.util.Collection)>
<java.util.LinkedHashSet: void <init>(java.util.Collection)>
<java.util.LinkedList: void <init>(java.util.Collection)>
<java.util.LinkedList: boolean addAll(java.util.Collection)>
<java.util.ArrayDeque: void <init>(java.util.Collection)>
<java.util.RandomAccessSubList: void <init>(java.util.AbstractList,int,int)>
<java.util.HashSet: void <init>(java.util.Collection)>
<java.util.TreeSet: void <init>(java.util.Collection)>
<java.util.TreeSet: void <init>(java.util.SortedSet)>
<java.util.TreeSet: boolean addAll(java.util.Collection)>
<java.util.AbstractCollection: boolean addAll(java.util.Collection)>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>
<java.util.ArrayList: void <init>(java.util.Collection)>
<java.util.ArrayList: boolean addAll(java.util.Collection)>
<java.util.concurrent.LinkedBlockingQueue: void <init>(java.util.Collection)>
<java.util.concurrent.DelayQueue: void <init>(java.util.Collection)>
<sun.awt.util.IdentityArrayList: void <init>(java.util.Collection)>
<sun.awt.util.IdentityArrayList: boolean addAll(java.util.Collection)>
<EDU.purdue.cs.bloat.util.ResizeableArrayList: void <init>(java.util.Collection)>
<EDU.purdue.cs.bloat.util.Graph$EdgeSet: boolean addAll(java.util.Collection)>
<org.python.core.PyObjectList: boolean addAll(java.util.Collection)>
<org.python.core.PyObjectList: void <init>(java.util.Collection)>
<org.python.core.PySequenceList: void <init>(java.util.Collection)>
<org.python.core.PySequenceList: boolean addAll(java.util.Collection)>
<org.python.core.PyList: void <init>(java.util.Collection)>
<org.python.core.PyList: void <init>(java.util.Vector)>
<soot.jimple.spark.ondemand.genericutil.ArraySet: boolean addAll(soot.jimple.spark.ondemand.genericutil.ArraySet)>
<soot.jimple.spark.ondemand.genericutil.ArraySet: void <init>(soot.jimple.spark.ondemand.genericutil.ArraySet)>
<soot.jimple.spark.ondemand.genericutil.ArraySet: void <init>(java.util.Collection)>
<soot.jimple.spark.ondemand.genericutil.ArraySet: boolean addAll(java.util.Collection)>
<soot.util.ArraySet: boolean addAll(java.util.Collection)>
<soot.jimple.toolkits.annotation.arraycheck.BoundedPriorityList: boolean addAll(java.util.Collection)>
<soot.util.HashChain: void insertAfter(java.util.List,java.lang.Object)>
<soot.util.HashChain: void insertAfter(soot.util.Chain,java.lang.Object)>
<soot.util.HashChain: void insertBefore(java.util.List,java.lang.Object)>
<soot.util.HashChain: void insertBefore(soot.util.Chain,java.lang.Object)>
<soot.jimple.toolkits.annotation.arraycheck.BoundedPriorityList: void <init>(java.util.List)>
<soot.PatchingChain: void insertAfter(java.util.List,java.lang.Object)>
<soot.PatchingChain: void insertAfter(soot.util.Chain,java.lang.Object)>
<soot.PatchingChain: void insertBefore(java.util.List,java.lang.Object)>
<soot.PatchingChain: void insertBefore(soot.util.Chain,java.lang.Object)>
<soot.shimple.internal.SPatchingChain: void insertAfter(java.util.List,soot.Unit)>
<soot.shimple.internal.SPatchingChain: void insertBefore(java.util.List,soot.Unit)>
<soot.shimple.internal.SPatchingChain: void insertBefore(java.util.List,java.lang.Object)>
<soot.shimple.internal.SPatchingChain: void insertAfter(java.util.List,java.lang.Object)>
<soot.util.IterableSet: void <init>(java.util.Collection)>
<java.util.concurrent.PriorityBlockingQueue: void <init>(java.util.Collection)>
<java.util.concurrent.LinkedBlockingDeque: void <init>(java.util.Collection)>
<java.util.concurrent.ConcurrentSkipListSet: void <init>(java.util.Collection)>
<java.util.concurrent.ConcurrentSkipListSet: void <init>(java.util.SortedSet)>
<java.util.concurrent.ConcurrentSkipListSet: void <init>(java.util.concurrent.ConcurrentNavigableMap)>
<java.util.concurrent.CopyOnWriteArrayList: void <init>(java.util.Collection)>
<java.util.concurrent.CopyOnWriteArrayList: int addAllAbsent(java.util.Collection)>
<java.util.concurrent.CopyOnWriteArrayList: boolean addAll(java.util.Collection)>
<java.util.concurrent.ConcurrentSkipListMap: void <init>(java.util.Map)>
<java.util.concurrent.ConcurrentSkipListMap: void <init>(java.util.SortedMap)>
<java.util.concurrent.ConcurrentHashMap: void <init>(java.util.Map)>
<java.util.concurrent.ConcurrentHashMap: void putAll(java.util.Map)>
<java.util.concurrent.CopyOnWriteArraySet: void <init>(java.util.Collection)>
<java.util.concurrent.CopyOnWriteArraySet: boolean addAll(java.util.Collection)>
<java.util.concurrent.CopyOnWriteArrayList$COWSubList: void <init>(java.util.concurrent.CopyOnWriteArrayList,int,int,java.util.concurrent.CopyOnWriteArrayList$1)>
<java.util.TreeMap$NavigableSubMap: void <init>(java.util.TreeMap,boolean,java.lang.Object,boolean,boolean,java.lang.Object,boolean)>
<java.util.TreeMap$AscendingSubMap: void <init>(java.util.TreeMap,boolean,java.lang.Object,boolean,boolean,java.lang.Object,boolean)>
<java.util.TreeMap$DescendingSubMap: void <init>(java.util.TreeMap,boolean,java.lang.Object,boolean,boolean,java.lang.Object,boolean)>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: void <init>(java.util.concurrent.ConcurrentSkipListMap,java.lang.Object,boolean,java.lang.Object,boolean,boolean)>
<java.util.HashMap: void putAllForCreate(java.util.Map)>
<soot.util.UnitMap: void putAll(java.util.Map)>
<org.jdom.ContentList: boolean addAll(java.util.Collection)>
<org.jdom.ContentList: void clearAndSet(java.util.Collection)>
<org.jdom.ContentList$FilterList: void <init>(org.jdom.ContentList,org.jdom.filter.Filter)>
<org.jdom.AttributeList: boolean addAll(java.util.Collection)>
<org.jdom.AttributeList: void clearAndSet(java.util.Collection)>
<com.sleepycat.collections.StoredCollection: boolean addAll(java.util.Collection)>
<sun.swing.BakedArrayList: void <init>(java.util.List)>
<com.itextpdf.text.Section: boolean addAll(java.util.Collection)>
<com.itextpdf.text.Phrase: <init>(com.itextpdf.text.Phrase)>
<com.itextpdf.text.Phrase: boolean addAll(java.util.Collection)>
<com.itextpdf.text.Paragraph: void <init>(com.itextpdf.text.Phrase)>
<com.itextpdf.text.ListItem: void <init>(com.itextpdf.text.Phrase)>
<com.itextpdf.text.Anchor: void <init>(com.itextpdf.text.Phrase)>