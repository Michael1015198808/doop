<java.util.HashMap: java.lang.Object get(java.lang.Object)>
<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
<java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>
<java.util.IdentityHashMap: java.lang.Object get(java.lang.Object)>
<java.util.TreeMap: java.lang.Object get(java.lang.Object)>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>
<java.util.Properties: java.lang.String getProperty(java.lang.String)>
<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.AbstractMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.Collections$SynchronizedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.Collections$UnmodifiableMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.Collections$CheckedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.TreeMap$NavigableSubMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.TreeMap$NavigableSubMap: java.lang.Object get(java.lang.Object)>
<java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>
<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>
<java.util.HashMap: java.lang.Object remove(java.lang.Object)>
<java.util.AbstractMap: java.lang.Object remove(java.lang.Object)>
<java.util.jar.Attributes: java.lang.Object remove(java.lang.Object)>
<java.util.Collections$SynchronizedMap: java.lang.Object remove(java.lang.Object)>
<java.util.TreeMap: java.lang.Object remove(java.lang.Object)>
<java.util.IdentityHashMap: java.lang.Object remove(java.lang.Object)>
<java.util.Collections$UnmodifiableMap: java.lang.Object remove(java.lang.Object)>
<java.util.Collections$CheckedMap: java.lang.Object remove(java.lang.Object)>
<java.util.TreeMap$NavigableSubMap: java.lang.Object remove(java.lang.Object)>
<java.util.EnumMap: java.lang.Object remove(java.lang.Object)>
<java.util.EnumMap: java.lang.Object get(java.lang.Object)>
<java.util.WeakHashMap: java.lang.Object remove(java.lang.Object)>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap: java.lang.Object get(java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap: java.lang.Object remove(java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap: java.lang.Object replace(java.lang.Object,java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replace(java.lang.Object,java.lang.Object)>
<java.util.Collections$SingletonMap: java.lang.Object get(java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.lang.Object get(java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.lang.Object remove(java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.lang.Object replace(java.lang.Object,java.lang.Object)>
