//pointer's host
.decl HostOfVar(?var:Var, ?containerKind:symbol, ?host:Value)
//.output HostOfVar(IO="file",filename="HostOfVar.csv",delimiter="\t")
.decl HostOfInstanceField(?basevalue:Value, ?sig:Field, ?containerKind:symbol, ?host:Value)
//.output HostOfInstanceField(IO="file",filename="HostOfInstanceField.csv",delimiter="\t")
.decl HostOfStaticField(?sig:Field, ?containerKind:symbol, ?host:Value)
//.output HostOfStaticField(IO="file",filename="HostOfStaticField.csv",delimiter="\t")
.decl HostOfArrayIndex(?baseValue:Value, ?containerKind:symbol, ?host:Value)
//.output HostOfArrayIndex(IO="file",filename="HostOfArrayIndex.csv",delimiter="\t")

//for main pta anslysis
//deal with VarpointsTo:- CollectionCutshortcutAssign [type check need here]
.decl CollectionCutshortcutAssign(?arg:Var, ?result:Var)
//.output CollectionCutshortcutAssign(IO="file",filename="CollectionCutshortcutAssign.csv",delimiter="\t")
//isRelatedCollectionOutInvoke method call
.decl RelatedCollectionOutMethod(?method:Method)
//.output RelatedCollectionOutMethod(IO="file",filename="RelatedCollectionOutMethod.csv",delimiter="\t")
//return assign not passing host&kind
.decl NotPassingReturnAssignFrom(?resutn:Var)
//.output NotPassingReturnAssignFrom(IO="file",filename="NotPassingReturnAssignFrom.csv",delimiter="\t")

//[core rule]
//addOutResultToHost method call
.decl OutResultToHost(?result:Var, ?host:Value, ?category:symbol)
//.output OutResultToHost(IO="file",filename="OutResultToHost.csv",delimiter="\t")
//executeInArgumentToHost method call
.decl executeInArgumentToHost(?arg:Var, ?host:Value, ?category:symbol)
//.output executeInArgumentToHost(IO="file",filename="executeInArgumentToHost.csv",delimiter="\t")
//inArgumentToHost method call
.decl InArgumentToHost(?arg:Var, ?callee:Method, ?index:number, ?host:Value)
//.output InArgumentToHost(IO="file",filename="InArgumentToHost.csv",delimiter="\t")

//correlation extenders logic
//processCorrelationExtender method call
.decl CorrelationExtenderNeedProcessing(?invocation:MethodInvocation, ?callee:Method)
//.output CorrelationExtenderNeedProcessing(IO="file",filename="CorrelationExtenderNeedProcessing.csv",delimiter="\t")
//correlaiton extender relation of vars
.decl ExtendCorrelation(?larger:Var, ?smaller:Var)
//.output ExtendCorrelation(IO="file",filename="ExtendCorrelation.csv",delimiter="\t")

//for entrySet
.decl EntrySetArgVar(?entrySetClass:Type, ?argVar:Var)
//.output EntrySetArgVar(IO="file",filename="EntrySetArgVar.csv",delimiter="\t")

//for arrayInitializer
.decl ArrayInitializerNeedProcessing(?invocation:MethodInvocation, ?constructor:Method, ?index0:number, ?index1:number)
//.output ArrayInitializerNeedProcessing(IO="file",filename="ArrayInitializerNeedProcessing.csv",delimiter="\t")
.decl VirtualArrayOfArray(?vitrualArray:Var, ?array:Var)
//.output VirtualArrayOfArray(IO="file",filename="VirtualArrayOfArray.csv",delimiter="\t")
.decl VirtualArrayOfCollectionVar(?virtualArray:Var, ?collectionVar:Var)
//.output VirtualArrayOfCollectionVar(IO="file",filename="VirtualArrayOfCollectionVar.csv",delimiter="\t")
.decl VirtualArrayAssign(?arrayIndex:Value, ?virtualArray:Var)
//.output VirtualArrayAssign(IO="file",filename="VirtualArrayAssign.csv",delimiter="\t")

//for ThisPropagater
.decl CollectionThisPropagate(?base:Var, ?this:Var)
//.output CollectionThisPropagate(IO="file",filename="CollectionThisPropagate.csv",delimiter="\t")

.decl isHost(?host:Value)

isHost(?obj),
HostOfVar(?var, "MAP_0", ?obj):-
    VarPointsTo(_, ?obj, _, ?var),
    Value_Type(?obj, ?objType),
    isHostClass(?objType),
    ContainerType(?objType, "MAP").

isHost(?obj),
HostOfVar(?var, "COL_0", ?obj):-
    VarPointsTo(_, ?obj, _, ?var),
    Value_Type(?obj, ?objType),
    isHostClass(?objType),
    ContainerType(?objType, "COLLECTION").

//host passer
//[done]
.decl HostPasserTemp(?var:Var, ?containerKind:symbol, ?generatedKind:symbol, ?result:Var)
HostOfVar(?result, ?generatedKind, ?host):-
    HostPasserTemp(?var, ?containerKind, ?generatedKind, ?result),
    HostOfVar(?var, ?containerKind, ?host).
    // .plan 1:(2,1)
    
// HostOfVar(?result, ?generatedKind, ?host):-
//     HostOfVar(?var, ?containerKind, ?host),
HostPasserTemp(?var, ?containerKind, ?generatedKind, ?result):-
    InvocationActualParamAndBase(-1, ?invocation, ?var),
    AssignReturnValue(?invocation, ?result),
    HostPassers(?containerKind, ?subString, ?generatedKind),
    MethodInvocation_Method(?invocation, ?methodSignature),
    contains(?subString,?methodSignature).

OutResultToHost(?result, ?host, ?category):-
    HostOfVar(?var, ?containerKind, ?host),
    InvocationActualParamAndBase(-1, ?invocation, ?var),
    AssignReturnValue(?invocation, ?result),
    OutMethodsB(?containerKind, ?subString, ?category),
    MethodInvocation_Method(?invocation, ?methodSignature),
    contains(?subString,?methodSignature).

HostOfVar(?result, ?generatedKind, ?host):-
    HostOfVar(?var, ?containerKind, ?host),
    ?containerKind = "COL_0",
    InvocationActualParamAndBase(-1, ?invocation, ?var),
    AssignReturnValue(?invocation, ?result),
    Var_Type(?var, ?baseType),
    isVectorClass(?baseType),
    MethodInvocation_Method(?invocation, ?methodSignature),
    contains("elements",?methodSignature),
    ?generatedKind = "COL_ITR".

HostOfVar(?result, ?generatedKind, ?host):-
    HostOfVar(?var, ?containerKind, ?host),
    ?containerKind = "MAP_0",
    InvocationActualParamAndBase(-1, ?invocation, ?var),
    AssignReturnValue(?invocation, ?result),
    Var_Type(?var, ?baseType),
    isHashtableClass(?baseType),
    MethodInvocation_Method(?invocation, ?methodSignature),
    contains("elements",?methodSignature),
    ?generatedKind = "MAP_VALUE_ITR".


CorrelationExtenderNeedProcessing(?invocation, ?callee):-
    CallGraphEdge(_, ?invocation, _, ?callee),
    CorrelationExtender(?callee, _, _).
ArrayInitializerNeedProcessing(?invocation, ?methodSignature, ?index0, ?index1):-
    MethodInvocation_Method(?invocation, ?methodSignature),
    ArrayInitializer(?methodSignature, ?index0, ?index1).


.decl SetKindInMap(?kind:symbol)
SetKindInMap("MAP_KEY_SET").
SetKindInMap("MAP_VALUES").
SetKindInMap("MAP_ENTRY_SET").

HostOfVar(?this, ?kind, ?host):-
    CollectionThisPropagate(?base, ?this),
    HostOfVar(?base, ?kind, ?host),
    SetKindInMap(?kind).

CollectionThisPropagate(?base, ?this):-
    CallGraphEdge(_, ?invocation, _, ?callee),
    ThisVar(?callee, ?this),
    InvocationActualParamAndBase(-1, ?invocation, ?base).

HostOfVar(?this, ?kind, ?host):-
    CallGraphEdge(_, ?invocation, _, ?callee),
    InvocationActualParamAndBase(-1, ?invocation, ?base),
    ThisVar(?callee, ?this),
    Method_DeclaringType(?callee, ?class),
    HostOfVar(?base, ?kind, ?host),
    ?class = "java.util.Hashtable$Enumerator".

//process ArrayInitializer
VirtualArrayOfCollectionVar(?var, ?collectionVar),
VirtualArrayOfArray(?var, ?arrayVar),
isVirtualVar(?var),
PlusVar(?var, ?caller, ?elementType):-
    ArrayInitializerNeedProcessing(?invocation, ?constructor, ?index0, ?index1),
    InvocationActualParamAndBase(?index0, ?invocation, ?arrayVar),
    InvocationActualParamAndBase(?index1, ?invocation, ?collectionVar),
    Var_Type(?arrayVar, ?arrayVarType),
    isArrayType(?arrayVarType),
    ComponentType(?arrayVarType, ?elementType),
    ?var = cat(cat(cat(?invocation, "->"), ?constructor), "/virtualArray"),
    Instruction_Method(?invocation, ?caller).

executeInArgumentToHost(?var, ?host, "Col-Value"):-
    VirtualArrayOfCollectionVar(?var, ?collectionVar),
    HostOfVar(?collectionVar, "COL_0", ?host).

VirtualArrayAssign(?arrayIndex, ?var):-
    VirtualArrayOfArray(?var, ?arrayVar),
    VarPointsTo(_,?arrayIndex,_,?arrayVar).

HostOfVar(?virtualArray, ?kind, ?host):-
    VirtualArrayAssign(?arrayIndex, ?virtualArray),
    HostOfArrayIndex(?arrayIndex, ?kind, ?host).
VarPointsTo("<<immutable-hcontext>>", ?value, "<<immutable-context>>", ?virtualArray):-
    VirtualArrayAssign(?arrayIndex, ?virtualArray),
    ArrayIndexPointsTo(_, ?value, _, ?arrayIndex).

// passing host to inner keySet/valueSet
//keySet
HostOfVar(?to,"MAP_KEY_SET",?host):-
    (AssignContextInsensitiveHeapAllocation(?heapValue, ?to, ?inmethod);
    AssignNormalHeapAllocation(?heapValue, ?to, ?inmethod)),
    Value_Type(?heapValue, ?type),
    KeySetOrValueSet(?type,_),
    ThisVar(?inmethod, ?this),
    HostOfVar(?this,"MAP_0",?host).
//valueSet
HostOfVar(?to,"MAP_VALUES",?host):-
    (AssignContextInsensitiveHeapAllocation(?heapValue, ?to, ?inmethod);
    AssignNormalHeapAllocation(?heapValue, ?to, ?inmethod)),
    Value_Type(?heapValue, ?type),
    KeySetOrValueSet(_,?type),
    ThisVar(?inmethod, ?this),
    HostOfVar(?this,"MAP_0",?host).

//entrySet
VarPointsTo("<<immutable-hcontext>>", ?heapValue, "<<immutable-context>>", ?arg):-
    (AssignContextInsensitiveHeapAllocation(?heapValue, _, ?inmethod);
    AssignNormalHeapAllocation(?heapValue, _, ?inmethod)),
    Value_Type(?heapValue, ?type),
    isMapEntryClass(?type),
    Method_DeclaringType(?inmethod, ?classType),
    EntrySetClass(?entrySetClass, ?classType),
    EntrySetArgVar(?entrySetClass, ?arg).

EntrySetArgVar(?entrySetClass, ?var),
isVirtualVar(?var),
PlusVar(?var, "null", "java.lang.Object"):-
    EntrySetClass(?entrySetClass, _),
    ?var = cat(?entrySetClass, "/arg").

executeInArgumentToHost(?arg, ?obj, "Col-Value"):-
    VarPointsTo(_, ?obj, _, _),
    Value_Type(?obj, ?objType),
    isHostClass(?objType),
    EntrySetArgVar(?objType, ?arg).

//process CorrelationExtender
// InvolvedMethod(?callee),
ExtendCorrelation(?arg1, ?arg2):-
    CorrelationExtenderNeedProcessing(?invocation, ?callee),
    CorrelationExtender(?callee, ?index0, ?index1),
    InvocationActualParamAndBase(?index0, ?invocation, ?arg1),
    InvocationActualParamAndBase(?index1, ?invocation, ?arg2).

executeInArgumentToHost(?arg, ?largerhost, "Col-Value"):-
    ExtendCorrelation(?larger, ?smaller),
    HostOfVar(?larger, "COL_0", ?largerhost),
    HostOfVar(?smaller, "MAP_KEY_SET", ?smallerhost),
    executeInArgumentToHost(?arg, ?smallerhost, "Map-Key").

executeInArgumentToHost(?arg, ?largerhost, "Col-Value"):-
    ExtendCorrelation(?larger, ?smaller),
    HostOfVar(?larger, "COL_0", ?largerhost),
    HostOfVar(?smaller, "MAP_VALUES", ?smallerhost),
    executeInArgumentToHost(?arg, ?smallerhost, "Map-Value").

//[done]
executeInArgumentToHost(?arg, ?largerhost, "Col-Value"):-
    executeInArgumentToHostTemp(?larger, ?arg, "Col-Value"),
    HostOfVar(?larger, "COL_0", ?largerhost).
    .plan 1:(2,1)

.decl executeInArgumentToHostTemp(?larger:Var, ?arg:Var, ?kind:symbol)
executeInArgumentToHostTemp(?larger, ?arg, "Col-Value"):-
    ExtendCorrelation(?larger, ?smaller),
    HostOfVar(?smaller, "COL_0", ?smallerhost),
    executeInArgumentToHost(?arg, ?smallerhost, "Col-Value").

// executeInArgumentToHost(?arg, ?largerhost, "Col-Value"):-
//     ExtendCorrelation(?larger, ?smaller),
//     HostOfVar(?larger, "COL_0", ?largerhost),
//     HostOfVar(?smaller, "COL_0", ?smallerhost),
//     executeInArgumentToHost(?arg, ?smallerhost, "Col-Value").

executeInArgumentToHost(?arg, ?largerhost, "Map-Key"):-
    ExtendCorrelation(?larger, ?smaller),
    HostOfVar(?larger, "MAP_0", ?largerhost),
    HostOfVar(?smaller, "MAP_0", ?smallerhost),
    executeInArgumentToHost(?arg, ?smallerhost, "Map-Key").

executeInArgumentToHost(?arg, ?largerhost, "Map-Value"):-
    ExtendCorrelation(?larger, ?smaller),
    HostOfVar(?larger, "MAP_0", ?largerhost),
    HostOfVar(?smaller, "MAP_0", ?smallerhost),
    executeInArgumentToHost(?arg, ?smallerhost, "Map-Value").


.decl InArgumentToHostTemp(?actual:Var, ?callee:Method, ?index:number, ?base:Var)
//.output InArgumentToHostTemp(IO="file",filename="InArgumentToHostTemp.csv",delimiter="\t")
InArgumentToHostTemp(?actual, ?callee, ?index, ?base):-
    CallGraphEdge(_, ?invocation, _, ?callee),
    ActualParam(?index, ?invocation, ?actual),
    InvocationActualParamAndBase(-1, ?invocation, ?base),
    !UnrelatedInvokes(?invocation).

InArgumentToHost(?actual, ?callee, ?index, ?host):-
    InArgumentToHostTemp(?actual, ?callee, ?index, ?base),
    HostOfVar(?base, _, ?host).

// InvolvedMethod(?callee),
executeInArgumentToHost(?arg, ?host, ?category) :-
    InArgumentToHost(?arg, ?callee, ?index, ?host),
    MethodParameterConstraint(?callee, ?index, ?cons, ?category),
    basic.SubtypeOf(?hostType, ?cons),
    Value_Type(?host, ?hostType).

//add super host
CollectionCutshortcutAssign(?arg, ?result) :-
    executeInArgumentToHost(?arg, ?host, ?category),
    OutResultToHost(?result, ?host, ?category).

.decl OutResultToHostTemp(?result:Var, ?base:Var, ?category:symbol)//optimize
//.output OutResultToHostTemp(IO="file",filename="OutResultToHostTemp.csv",delimiter="\t")

.decl HostOfBaseTypeCheck(?host:Value, ?base:Var)
//.output HostOfBaseTypeCheck(IO="file",filename="HostOfBaseTypeCheck.csv",delimiter="\t")

OutResultToHost(?result, ?host, ?category) :-  
    OutResultToHostTemp(?result, ?base, ?category),
    HostOfBaseTypeCheck(?host, ?base).

OutResultToHostTemp(?result, ?base, ?category):-
    CallGraphEdge(_, ?invocation, _, ?callee),
    AssignReturnValue(?invocation, ?result),
    OutMethodsA(?callee, ?category),
    InvocationActualParamAndBase(-1, ?invocation, ?base).

HostOfBaseTypeCheck(?host, ?base):-
    HostOfVar(?base, _, ?host),
    Var_Type(?base, ?baseType),
    Value_Type(?host, ?hostType),
    basic.SubtypeOf(?hostType, ?baseType).

//optimize purpose
.decl OutResultHostTempOpt1(?result:Var, ?base:Var)
//.output OutResultHostTempOpt1(IO="file",filename="OutResultHostTempOpt1.csv",delimiter="\t")

.decl OutResultHostTempOpt2(?result:Var, ?base:Var)
//.output OutResultHostTempOpt2(IO="file",filename="OutResultHostTempOpt2.csv",delimiter="\t")

.decl OutResultHostTempOpt3(?result:Var, ?base:Var)
//.output OutResultHostTempOpt3(IO="file",filename="OutResultHostTempOpt3.csv",delimiter="\t")

.decl OutResultHostTempOpt4(?result:Var, ?base:Var)
//.output OutResultHostTempOpt4(IO="file",filename="OutResultHostTempOpt4.csv",delimiter="\t")

.decl OutResultHostTempOpt5(?result:Var, ?base:Var)
//.output OutResultHostTempOpt5(IO="file",filename="OutResultHostTempOpt5.csv",delimiter="\t")

OutResultHostTempOpt1(?result, ?base) :-
    CallGraphEdge(_, ?invocation, _, ?callee),
    AssignReturnValue(?invocation, ?result),
    InvocationActualParamAndBase(-1, ?invocation, ?base),
    Method_DeclaringType(?callee, ?classType),
    isMapEntryClass(?classType),
    contains("getValue(",?callee).
OutResultToHost(?result, ?host, "Map-Value"):-
    OutResultHostTempOpt1(?result, ?base),
    HostOfVar(?base, "MAP_ENTRY", ?host).

OutResultHostTempOpt2(?result, ?base) :-
    CallGraphEdge(_, ?invocation, _, ?callee),
    AssignReturnValue(?invocation, ?result),
    InvocationActualParamAndBase(-1, ?invocation, ?base),
    Method_DeclaringType(?callee, ?classType),
    isMapEntryClass(?classType),
    contains("getKey(",?callee).
OutResultToHost(?result, ?host, "Map-Key"):-
    OutResultHostTempOpt2(?result, ?base),
    HostOfVar(?base, "MAP_ENTRY", ?host).

OutResultHostTempOpt3(?result, ?base) :-
    CallGraphEdge(_, ?invocation, _, ?callee),
    AssignReturnValue(?invocation, ?result),
    InvocationActualParamAndBase(-1, ?invocation, ?base),
    Method_DeclaringType(?callee, ?classType),
    IteratorClass(?classType),
    (contains("next()",?callee);
    contains("previous()",?callee)).
OutResultToHost(?result, ?host, "Map-Value"):-
    OutResultHostTempOpt3(?result, ?base),
    HostOfVar(?base, "MAP_VALUE_ITR", ?host).

OutResultHostTempOpt4(?result, ?base) :-
    CallGraphEdge(_, ?invocation, _, ?callee),
    AssignReturnValue(?invocation, ?result),
    InvocationActualParamAndBase(-1, ?invocation, ?base),
    Method_DeclaringType(?callee, ?classType),
    IteratorClass(?classType),
    (contains("next()",?callee);
    contains("previous()",?callee)).
OutResultToHost(?result, ?host, "Map-Key"):-
    OutResultHostTempOpt4(?result, ?base),
    HostOfVar(?base, "MAP_KEY_ITR", ?host).
OutResultToHost(?result, ?host, "Col-Value"):-
    OutResultHostTempOpt4(?result, ?base),
    HostOfVar(?base, "COL_ITR", ?host).

OutResultHostTempOpt5(?result, ?base) :-
    CallGraphEdge(_, ?invocation, _, ?callee),
    AssignReturnValue(?invocation, ?result),
    InvocationActualParamAndBase(-1, ?invocation, ?base),
    Method_DeclaringType(?callee, ?classType),
    isEnumerationClass(?classType),
    contains("nextElement()",?callee).
OutResultToHost(?result, ?host, "Map-Value"):-
    OutResultHostTempOpt5(?result, ?base),
    HostOfVar(?base, "MAP_VALUE_ITR", ?host).
OutResultToHost(?result, ?host, "Map-Key"):-
    OutResultHostTempOpt5(?result, ?base),
    HostOfVar(?base, "MAP_KEY_ITR", ?host).
OutResultToHost(?result, ?host, "Col-Value"):-
    OutResultHostTempOpt5(?result, ?base),
    HostOfVar(?base, "COL_ITR", ?host).

//VPT & host & kind pass for collection-cutshortcut assign
//[opt]
HostOfVar(?result, ?kind, ?host):-
    HostOfVar(?arg, ?kind, ?host),
    CollectionCutshortcutAssign(?arg, ?result).
    .plan 1:(2,1)

//[opt]
.decl CollectionVarPointsToTemp(?arg:Var, ?result:Var, ?allowedType:Type)
VarPointsTo("<<immutable-hcontext>>", ?value, "<<immutable-context>>", ?result):-
    VarPointsTo(_, ?value, _, ?arg),
    CollectionVarPointsToTemp(?arg, ?result, ?allowedType),
    Value_Type(?value, ?type),
    basic.SubtypeOf(?type, ?allowedType).
    .plan 1:(2,1,3,4), 2:(3,1,2,4)

    
CollectionVarPointsToTemp(?arg, ?result, ?allowedType):-    
    CollectionCutshortcutAssign(?arg, ?result),
    Var_Type(?result, ?allowedType).

//shouldStopEdge
NotPassingReturnAssignFrom(?return):-
    ReturnVar(?return, ?method),
    Method_DeclaringType(?method, ?classType),
    LimitedHostClasses(?classType),
    isHashtableClass(?classType),
    (contains("elements()",?method);
    contains("keys()", ?method)).
    
NotPassingReturnAssignFrom(?return):-
    ReturnVar(?return, ?method),
    Method_DeclaringType(?method, ?classType),
    LimitedHostClasses(?classType),
    isVectorClass(?classType),
    contains("elements()", ?method).
    
NotPassingReturnAssignFrom(?return):-
    ReturnVar(?return, ?method),
    Method_DeclaringType(?method, ?classType),
    LimitedHostClasses(?classType),
    (contains("iterator(",?method);
    contains("entrySet()",?method);
    contains("keySet()",?method);
    contains("KeySet()",?method);
    contains("values()",?method);
    contains("Entry(",?method);
    contains("Iterator(",?method)).

// InvolvedMethod(?method):-
    // RelatedCollectionOutMethod(?method).
// InvolvedMethod(?method):-
    // RelatedCollectionOutMethodB(?method).

// InvolvedMethod(?method):-
    // ArrayInitializerNeedProcessingTamiflex(_, ?method, _, _).
// InvolvedMethod(?method):-
    // ArrayInitializerNeedProcessing(_, ?method, _, _).

// logic to cut collection edges in main pta analysis

RelatedCollectionOutMethod(?method):-   
    OutMethodsA(?method, _).
   // Method_DeclaringType(?method, ?classType),
   // !TaintContainerType(?classType).

.decl RelatedCollectionOutMethodB(?method:Method)
.decl MapEntryPoll(?method:Method)

MapEntryPoll(?method),
RelatedCollectionOutMethodB(?method):-
    Method_DeclaringType(?method, ?classType),
    isMapEntryClass(?classType),
    (contains("getValue(", ?method);
    contains("getKey(", ?method)).

RelatedCollectionOutMethodB(?method):-
    Method_DeclaringType(?method, ?classType),
    IteratorClass(?classType),
    (contains("next()", ?method);
    contains("previous()", ?method)).

RelatedCollectionOutMethodB(?method):-
    Method_DeclaringType(?method, ?classType),
    isEnumerationClass(?classType),
    contains("nextElement()", ?method),
    HostClassInnerClass(?classType).

.decl TaingTypeTemp(?class:Type)
//.output TaingTypeTemp(IO="file",filename="TaingTypeTemp.csv",delimiter="\t")
TaingTypeTemp(?class):-
    ContainerType(?class, _),
    isClassType(?class),
    !ClassModifier("abstract", ?class),
    !LimitedHostClasses(?class),
    !AllExcludeClass(?class).

.decl TaintContainerType(?class:Type)
//.output TaintContainerType(IO="file",filename="TaintContainerType.csv",delimiter="\t")

TaintContainerType(?class):-
    TaingTypeTemp(?class),
    !isAbstractListClass(?class).

.decl TaintAbstractListClass(?class:Type)
//.output TaintAbstractListClass(IO="file",filename="TaintAbstractListClass.csv",delimiter="\t")
TaintAbstractListClass(?class):-
    TaingTypeTemp(?class),
    isAbstractListClass(?class).


.decl TaintHost(?host:Value)
//.output TaintHost(IO="file",filename="TaintHost.csv",delimiter="\t")

TaintHost(?host):-
    CallGraphEdge(_, ?invocation,_,?callee),
    CorrelationExtender(?callee, _, ?smallindex),
    InvocationActualParamAndBase(?smallindex, ?invocation, ?smallarg),
    HostOfVar(?smallarg,_,?host),
    Value_Type(?host, ?valuetype),
    TaintContainerType(?valuetype),
    !TaintAbstractListClass(?valuetype).

//optmize
.decl TaintHostTemp1(?smallarg:Var, ?bigarg:Var)
TaintHostTemp1(?smallarg, ?bigarg):-
    CallGraphEdge(_, ?invocation,_,?callee),
    CorrelationExtender(?callee, ?bigindex, ?smallindex),
    InvocationActualParamAndBase(?smallindex, ?invocation, ?smallarg),
    InvocationActualParamAndBase(?bigindex, ?invocation, ?bigarg).

.decl TaintHostTemp2(?bigarg:Var)
TaintHostTemp2(?bigarg):-
    TaintHostTemp1(?smallarg, ?bigarg),
    HostOfVar(?smallarg,_,?host),
    TaintHost(?host).

TaintHost(?bigHost):-
    TaintHostTemp2(?bigarg),
    HostOfVar(?bigarg,_,?bigHost),
    Value_Type(?bigHost, ?valuetype),
    !TaintAbstractListClass(?valuetype).

// TaintHost(?bigHost):-
//     CallGraphEdge(_, ?invocation,_,?callee),
//     CorrelationExtender(?callee, ?bigindex, ?smallindex),
//     InvocationActualParamAndBase(?smallindex, ?invocation, ?smallarg),
//     InvocationActualParamAndBase(?bigindex, ?invocation, ?bigarg),
//     HostOfVar(?smallarg,_,?host),
//     TaintHost(?host),
//     HostOfVar(?bigarg,_,?bigHost),
//     Value_Type(?bigHost, ?valuetype),
//     !TaintAbstractListClass(?valuetype).

.decl TaintHostOutAssignA(?actualret:Var, ?return:Var)
//.output TaintHostOutAssignA(IO="file",filename="TaintHostOutAssignA.csv",delimiter="\t")

TaintHostOutAssignA(?result, ?return):-
  CallGraphEdge(_, ?invocation, _, ?method),
  AssignReturnValue(?invocation, ?result),
  ReturnVar(?return, ?method),
  MethodInvocation_Base(?invocation, ?base),
  HostOfVar(?base, _, ?host),
  TaintHost(?host),
  (RelatedCollectionOutMethod(?method);
  RelatedCollectionOutMethodB(?method)).

CollectionCutshortcutAssign(?return, ?result):-
    TaintHostOutAssignA(?result, ?return).


.decl AbstractListSubClassToGetMethod(?class:Type, ?method:Method)
//.output AbstractListSubClassToGetMethod(IO="file",filename="AbstractListSubClassToGetMethod.csv",delimiter="\t")
AbstractListSubClassToGetMethod(?class, ?callee):-
    TaintAbstractListClass(?class),
    basic.ResolveInvocation(?class, ?invocation, ?callee),
    MethodInvocation_Method(?invocation, ?sig),
    contains("java.lang.Object get(int)", ?sig).


//abstractList
.decl AbstractListExecuteInArgumentToHost(?arg:Var, ?host:Value, ?category:symbol)
//.output AbstractListExecuteInArgumentToHost(IO="file",filename="AbstractListExecuteInArgumentToHost.csv",delimiter="\t")
AbstractListExecuteInArgumentToHost(?return, ?heapValue , "Col-Value"):-
    (AssignContextInsensitiveHeapAllocation(?heapValue, _, _);
    AssignNormalHeapAllocation(?heapValue, _,  _)),
    Value_Type(?heapValue, ?type),
    TaintAbstractListClass(?type),
    AbstractListSubClassToGetMethod(?type, ?callee),
    ReturnVar(?return, ?callee).

executeInArgumentToHost(?arg, ?host, ?category):-
    AbstractListExecuteInArgumentToHost(?arg, ?host, ?category).


#ifdef TAMIFLEX
//tamiflex return var
HostOfVar(?to, ?kind, ?host):-
  OptInterproceduralAssign(_, ?to, _, ?from),
  HostOfVar(?from, ?kind, ?host),
  !NotPassingReturnAssignFrom(?from).

//tamiflex param assign
HostOfVar(?to, ?kind, ?host):-
  TamiflexInvocationArgumentArrayValue(_, ?to, _, ?basevalue),
  HostOfArrayIndex(?basevalue, ?kind, ?host).

//tamiflex base->this host passing
HostOfVar(?this, ?kind, ?host):-
    Tamiflex_Invoke(_, ?invocation, ?callee),
    ! Method_Modifier("static", ?callee),
    ActualParam(0, ?invocation, ?base),
    ThisVar(?callee, ?this),
    HostOfVar(?base, ?kind, ?host),
    SetKindInMap(?kind).

HostOfVar(?this, ?kind, ?host):-
    Tamiflex_Invoke(_, ?invocation, ?callee),
    ! Method_Modifier("static", ?callee),
    ActualParam(0, ?invocation, ?base),
    ThisVar(?callee, ?this),
    HostOfVar(?base, ?kind, ?host),
    Method_DeclaringType(?callee, ?class),
    ?class = "java.util.Hashtable$Enumerator".

//host passer
HostOfVar(?result, ?generatedKind, ?host):-
    HostOfVar(?var, ?containerKind, ?host),
    TamiflexInvocationBase(?invocation, ?var),
    AssignReturnValue(?invocation, ?result),
    HostPassers(?containerKind, ?subString, ?generatedKind),
    Tamiflex_Invoke(_, ?invocation, ?methodSignature),
    contains(?subString,?methodSignature).

HostOfVar(?result, ?generatedKind, ?host):-
    HostOfVar(?var, ?containerKind, ?host),
    ?containerKind = "COL_0",
    TamiflexInvocationBase(?invocation, ?var),
    AssignReturnValue(?invocation, ?result),
    Var_Type(?var, ?baseType),
    isVectorClass(?baseType),
    Tamiflex_Invoke(_, ?invocation, ?methodSignature),
    contains("elements(",?methodSignature),
    ?generatedKind = "COL_ITR".

HostOfVar(?result, ?generatedKind, ?host):-
    HostOfVar(?var, ?containerKind, ?host),
    ?containerKind = "MAP_0",
    TamiflexInvocationBase(?invocation, ?var),
    AssignReturnValue(?invocation, ?result),
    Var_Type(?var, ?baseType),
    isHashtableClass(?baseType),
    Tamiflex_Invoke(_, ?invocation, ?methodSignature),
    contains("elements(",?methodSignature),
    ?generatedKind = "MAP_VALUE_ITR".


//array initializer
.decl ArrayInitializerNeedProcessingTamiflex(?invocation:MethodInvocation, ?constructor:Method, ?index0:number, ?index1:number)
//.output ArrayInitializerNeedProcessingTamiflex(IO="file",filename="ArrayInitializerNeedProcessingTamiflex.csv",delimiter="\t")

ArrayInitializerNeedProcessingTamiflex(?invocation, ?methodSignature, ?index0, ?index1):-
    Tamiflex_Invoke_Simple(?invocation, ?methodSignature),
    ArrayInitializer(?methodSignature, ?index0, ?index1).

VirtualArrayOfCollectionVar(?var, ?collectionVar),
VirtualArrayOfArray(?var, ?arrayVar),
isVirtualVar(?var),
PlusVar(?var, ?caller, ?elementType):-
    ArrayInitializerNeedProcessingTamiflex(?invocation, ?constructor, -1, ?index1),
    ?index1 != -1,
    TamiflexInvocationBase(?invocation, ?arrayVar),
    TamiflexInvocationActualParam(?invocation, ?collectionVar),
    Var_Type(?arrayVar, ?arrayVarType),
    isArrayType(?arrayVarType),
    ComponentType(?arrayVarType, ?elementType),
    ?var = cat(cat(cat(?invocation, "->"), ?constructor), "/virtualArray"),
    Instruction_Method(?invocation, ?caller).

VirtualArrayOfCollectionVar(?var, ?collectionVar),
VirtualArrayOfArray(?var, ?arrayVar),
isVirtualVar(?var),
PlusVar(?var, ?caller, ?elementType):-
    ArrayInitializerNeedProcessingTamiflex(?invocation, ?constructor, ?index0, -1),
    ?index0 != -1,
    TamiflexInvocationActualParam(?invocation, ?arrayVar),
    TamiflexInvocationBase(?invocation, ?collectionVar),
    Var_Type(?arrayVar, ?arrayVarType),
    isArrayType(?arrayVarType),
    ComponentType(?arrayVarType, ?elementType),
    ?var = cat(cat(cat(?invocation, "->"), ?constructor), "/virtualArray"),
    Instruction_Method(?invocation, ?caller).

VirtualArrayOfCollectionVar(?var, ?collectionVar),
VirtualArrayOfArray(?var, ?arrayVar),
isVirtualVar(?var),
PlusVar(?var, ?caller, ?elementType):-
    ArrayInitializerNeedProcessingTamiflex(?invocation, ?constructor, ?index0, ?index1),
    ?index0 != -1,
    ?index1 != -1,
    TamiflexInvocationActualParam(?invocation, ?arrayVar),
    TamiflexInvocationActualParam(?invocation, ?collectionVar),
    Var_Type(?arrayVar, ?arrayVarType),
    isArrayType(?arrayVarType),
    ComponentType(?arrayVarType, ?elementType),
    ?var = cat(cat(cat(?invocation, "->"), ?constructor), "/virtualArray"),
    Instruction_Method(?invocation, ?caller).


//correlation extender
.decl CorrelationExtenderNeedProcessingTamiflex(?invocation:MethodInvocation, ?callee:Method)
//.output CorrelationExtenderNeedProcessingTamiflex(IO="file",filename="CorrelationExtenderNeedProcessingTamiflex.csv",delimiter="\t")
CorrelationExtenderNeedProcessingTamiflex(?invocation, ?callee):-
    TamiflexCallGraphEdge(_, ?invocation, _, ?callee),
    CorrelationExtender(?callee, _, _).
    
ExtendCorrelation(?base, ?arg2):-
    CorrelationExtenderNeedProcessingTamiflex(?invocation, ?callee),
    CorrelationExtender(?callee, -1, ?index1),
    ?index1 != -1,
    TamiflexInvocationBase(?invocation, ?base),
    TamiflexInvocationActualParam(?invocation, ?arg2).

ExtendCorrelation(?arg1, ?base):-
    CorrelationExtenderNeedProcessingTamiflex(?invocation, ?callee),
    CorrelationExtender(?callee, ?index0, -1),
    ?index0 != -1,
    TamiflexInvocationBase(?invocation, ?base),
    TamiflexInvocationActualParam(?invocation, ?arg1).

ExtendCorrelation(?arg1, ?arg1):-
    CorrelationExtenderNeedProcessingTamiflex(?invocation, ?callee),
    CorrelationExtender(?callee, ?index0, ?index1),
    ?index0 != -1,
    ?index1 != -1,
    TamiflexInvocationActualParam(?invocation, ?arg1).

//in argument to host
.decl InArgumentToHostTamiflexTemp(?actual:Var, ?callee:Method, ?base:Var)
//.output InArgumentToHostTamiflexTemp(IO="file",filename="InArgumentToHostTamiflexTemp.csv",delimiter="\t")
InArgumentToHostTamiflexTemp(?actual, ?callee, ?base):-
    TamiflexCallGraphEdge(_, ?invocation, _, ?callee),
    TamiflexInvocationActualParam(?invocation, ?actual),
    TamiflexInvocationBase(?invocation, ?base),
    !UnrelatedInvokes(?invocation).

.decl InArgumentToHostTamiflex(?actual:Var, ?callee:Method, ?host:Value)
InArgumentToHostTamiflex(?actual, ?callee, ?host):-
    InArgumentToHostTamiflexTemp(?actual, ?callee, ?base),
    HostOfVar(?base, _, ?host).

executeInArgumentToHost(?arg, ?host, ?category) :-
    InArgumentToHostTamiflex(?arg, ?callee, ?host),
    MethodParameterConstraint(?callee, _, ?cons, ?category),
    basic.SubtypeOf(?hostType, ?cons),
    Value_Type(?host, ?hostType).

//taint by unknown collection
TaintHost(?bigHost):-
    TamiflexCallGraphEdge(_, ?invocation, _, ?callee),
    CorrelationExtender(?callee, _, ?smallindex),
    TamiflexInvocationBase(?invocation, ?smallarg),
    TamiflexInvocationActualParam(?invocation, ?bigarg),
    ?smallindex = -1,
    HostOfVar(?smallarg,_,?host),
    TaintHost(?host),
    HostOfVar(?bigarg,_,?bigHost).

TaintHost(?bigHost):-
    TamiflexCallGraphEdge(_, ?invocation, _, ?callee),
    CorrelationExtender(?callee, ?bigindex, _),
    TamiflexInvocationBase(?invocation, ?bigarg),
    TamiflexInvocationActualParam(?invocation, ?smallarg),
    ?bigindex = -1,
    HostOfVar(?smallarg,_,?host),
    TaintHost(?host),
    HostOfVar(?bigarg,_,?bigHost).

TaintHost(?bigHost):-
    TamiflexCallGraphEdge(_, ?invocation, _, ?callee),
    CorrelationExtender(?callee, ?bigindex, ?smallindex),
    TamiflexInvocationActualParam(?invocation, ?smallarg),
    TamiflexInvocationActualParam(?invocation, ?bigarg),
    ?smallindex != -1,
    ?bigindex != -1,
    HostOfVar(?smallarg,_,?host),
    TaintHost(?host),
    HostOfVar(?bigarg,_,?bigHost).

#endif //TAMIFLEX

