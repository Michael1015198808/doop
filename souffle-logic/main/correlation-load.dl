
//load part
.decl IgnoredReturnVarLoad(?return:Var)
.output IgnoredReturnVarLoad(IO="file",filename="IgnoredReturnVarLoad.csv",delimiter="\t")

.decl SpecialLoad(?base:Var, ?sig:Field, ?to:Var, ?inmethod:Method)
.output SpecialLoad(IO="file",filename="SpecialLoad.csv",delimiter="\t")

.decl SpecialLoadTemp(?base:Var, ?sig:Field, ?to:Var, ?inmethod:Method)
.output SpecialLoadTemp(IO="file",filename="SpecialLoadTemp.csv",delimiter="\t")

.decl InstanceLoadExcludeSpecialLoad(?base:Var, ?sig:Field, ?to:Var, ?inmethod:Method)
.output InstanceLoadExcludeSpecialLoad(IO="file",filename="InstanceLoadExcludeSpecialLoad.csv",delimiter="\t")

//x = y.f without the constraint of x is not redefined
SpecialLoadTemp(?base, ?sig, ?to, ?inmethod):-
    LoadInstanceField(?base, ?sig, ?to, ?inmethod),
    Method_DeclaringType(?inmethod, ?class),
    ?class != "java.awt.Component",
    ?class != "javax.swing.JComponent",
#ifdef COLLECTION 
    !RelatedCollectionOutMethod(?inmethod),
#endif
    !ReachableMethodFromOtherSource(?inmethod),
    FormalParamNotRedefinedExceptForSpecialDefine(?inmethod, ?base, _),
    ReturnVar(?to, ?inmethod).

InstanceLoadExcludeSpecialLoad(?base, ?sig, ?to, ?inmethod):-  
    LoadInstanceField(?base, ?sig, ?to, ?inmethod),
    !SpecialLoadTemp(?base, ?sig, ?to, ?inmethod).

//x = y.f with the constraint of x is not redefined
SpecialLoad(?base, ?sig, ?var, ?inmethod):-
    SpecialLoadTemp(?base, ?sig, ?var, ?inmethod),
    !InstanceLoadExcludeSpecialLoad(_, _, ?var, ?inmethod),
    !LoadStaticField(_, ?var, ?inmethod),
    !LoadArrayIndex(_, ?var, ?inmethod),
    !AssignNull(?var, ?inmethod),
    !AssignHeapAllocation(_, ?var, ?inmethod),
    !AssignReturnValue(_, ?var),
    !Throw(_, ?var),
    !AssignCast(_, _, ?var, ?inmethod),
    !AssignLocal(_, ?var, ?inmethod).

IgnoredReturnVarLoad(?return):-
    SpecialLoad(_, _, ?return, _).

.decl AbstractInstanceLoad(?to:Var, ?base:Var, ?sig:Field, ?inmethod:Method, ?toAllowedType:Type, ?baseAllowedType:Type)
.output AbstractInstanceLoad(IO="file",filename="AbstractInstanceLoad.csv",delimiter="\t")

.decl AbstractInstanceLoadTemp(?baseindex:number, ?sig:Field, ?callee:Method, ?toAllowedType:Type, ?fromAllowedType:Type)
.output AbstractInstanceLoadTemp(IO="file",filename="AbstractInstanceLoadTemp.csv",delimiter="\t")

AbstractInstanceLoadTemp(?baseindex, ?sig, ?callee, ?toAllowedType, ?baseAllowedType):-
    SpecialLoad(?base, ?sig, ?to, ?callee),
    Var_Type(?to, ?toAllowedType),
    Var_Type(?base, ?baseAllowedType),
    MethodFormalParamAndThisIncludingLocal(?baseindex, ?callee, ?base).

AbstractInstanceLoad(?newTo, ?newBase, ?sig, ?caller, ?toAllowedType, ?baseAllowedType):-
    AbstractInstanceLoadTemp(?baseindex, ?sig, ?callee, ?toAllowedType, ?baseAllowedType),
    CallGraphEdge(_, ?invocation, _, ?callee),
    Instruction_Method(?invocation, ?caller),
    InvocationActualParamAndBase(?baseindex, ?invocation, ?newBase),
    AssignReturnValue(?invocation, ?newTo).

.decl AbstractVarPointsToTemp(?to:Var, ?basehctx:configuration.HContext, ?basevalue:Value, ?sig:Field, ?toAllowedType:Type)
.output AbstractVarPointsToTemp(IO="file",filename="AbstractVarPointsToTemp.csv",delimiter="\t")

AbstractVarPointsToTemp(?to, ?basehctx, ?basevalue, ?sig, ?toAllowedType):-
    AbstractInstanceLoad(?to, ?base, ?sig, _, ?toAllowedType, ?baseAllowedType),
    VarPointsTo(?basehctx, ?basevalue, _, ?base),
    Value_Type(?basevalue, ?basevaluetype),
    basic.SubtypeOf(?basevaluetype, ?baseAllowedType).

.decl AbstractVarPointsTo(?hctx:configuration.HContext, ?value:Value, ?ctx:configuration.Context, ?var:Var)
.output AbstractVarPointsTo(IO="file",filename="AbstractVarPointsTo.csv",delimiter="\t")

AbstractVarPointsTo("<<immutable-hcontext>>", ?value, "<<immutable-context>>", ?to):-
    AbstractVarPointsToTemp(?to, _, ?basevalue, ?sig, ?toAllowedType),
    InstanceFieldPointsTo(_, ?value, ?sig, _, ?basevalue),
    Value_Type(?value, ?valuetype),
    basic.SubtypeOf(?valuetype, ?toAllowedType).


#ifdef COLLECTION
HostOfVar(?to, ?kind, ?host):-  
    AbstractVarPointsToTemp(?to, _, ?basevalue, ?sig, _),
    HostOfInstanceField(?basevalue, ?sig, ?kind, ?host).
#endif COLLECTION

VarPointsTo(?hctx, ?value, ?ctx, ?var):-
    AbstractVarPointsTo(?hctx, ?value, ?ctx, ?var).

#ifdef TAMIFLEX
AbstractInstanceLoad(?newTo, ?newBase, ?sig, ?caller, ?toAllowedType, ?baseAllowedType):-
    SpecialLoad(?base, ?sig, ?to, ?callee),
    Var_Type(?to, ?toAllowedType),
    Var_Type(?base, ?baseAllowedType),
    MethodFormalParamAndThisIncludingLocal(-1, ?callee, ?base),
    TamiflexCallGraphEdge(_, ?invocation, _, ?callee),
    Instruction_Method(?invocation, ?caller),
    TamiflexInvocationBase(?invocation, ?newBase),
    AssignReturnValue(?invocation, ?newTo).

AbstractInstanceLoad(?newTo, ?newBase, ?sig, ?caller, ?toAllowedType, ?baseAllowedType):-
    SpecialLoad(?base, ?sig, ?to, ?callee),
    Var_Type(?to, ?toAllowedType),
    Var_Type(?base, ?baseAllowedType),
    MethodFormalParamAndThisIncludingLocal(?baseindex, ?callee, ?base),
    ?baseindex != -1,
    TamiflexCallGraphEdge(_, ?invocation, _, ?callee),
    Instruction_Method(?invocation, ?caller),
    TamiflexInvocationActualParam(?invocation, ?newBase),
    AssignReturnValue(?invocation, ?newTo).
#endif TAMIFLEX